{
  "tasks": {
    "build:direnv:clean": "rm -rf .direnv/*",
    "build:install": "deno task install:commitlint && deno task install:commitizen && deno task install:fbp-protocol",
    "build:install:commitizen": "deno eval 'import * as x from \"npm:/cz-conventional-changelog\"'",
    "build:install:commitlint": "deno eval 'import * as x from \"npm:/@commitlint/config-conventional\"'",
    "build:install:fbp-protocol": "cd fbp-protocol && pnpm i && rm pnpm-lock.yaml",
    "build:purescript": "deno task build:purescript:clean && deno task build:purescript:ffi && deno task build:purescript:spago && deno task build:purescript:bundle",
    "build:purescript:ffi": "cd src/ffi && deno run -A npm:typescript/tsc -p . && deno task build:purescript:spago && deno task build:purescript:bundle",
    "build:purescript:ffi:watch": "cd src/ffi && bash -c \"while inotifywait -qqre modify,create,delete,move .;do echo '> tsc -p' && deno task build:purescript:ffi;done\"",
    "build:purescript:ffi:types": "cd src/ffi && deno types > deno.d.ts",
    "build:purescript:clean": "rm -rf .spago output output-es",
    "build:purescript:spago": "spago build",
    "build:purescript:bundle": "purs-backend-es bundle-module --no-build --source-maps --to dist/Main.js",
    "ci:commit": "deno run -A npm:commitizen/cz",
    "ci:commit:commitlint": "deno run -A npm:commitlint --edit \"\"",
    "ci:commit:husky:install": "deno run -A npm:husky install",
    "ci:commit:lint-staged": "deno run -A npm:lint-staged",
    "ci:dev": "deno run --instable -A --watch src/runtime.ts",
    "ci:fmt": "deno fmt",
    "ci:fmt:check": "deno fmt --check",
    "ci:lint": "deno lint",
    "ci:lint:watch": "deno task lint --watch",
    "run:docker": "docker run -it -v $(PWD):/app nixos/nix",
    "run:fbp-protocol": "deno run -A npm:fbp-protocol/fbp-init --name c9-fbp --port 3569 --command \"deno task runtime\"",
    "run:purescript:start": "deno run --unstable -A bin/start.js",
    "run:purescript:start:watch": "deno run --watch --unstable -A bin/start.js",
    "run:runtime": "deno run --unstable -A src/runtime.ts",
    "run:start": "deno run --unstable -A src/runtime.ts",
    "test": "deno test --unstable -A --trace-ops",
    "test:coverage": "deno task test:coverage:clear && deno task test:coverage:test && deno task test:coverage:coverage",
    "test:coverage:clear": "rm -rf coverage && mkdir coverage",
    "test:coverage:coverage": "deno coverage ./coverage --lcov --output=./coverage/coverage.lcov && deno coverage ./coverage",
    "test:coverage:report": "genhtml -o coverage/report coverage/coverage.lcov",
    "test:coverage:test": "deno task test --coverage=./coverage",
    "test:fbp-protocol": "fbp-protocol/node_modules/.bin/_mocha fbp-protocol/test/*.js --reporter spec",
    "test:watch": "deno task test --watch"
  },
  "imports": {
    "#/": "./src/",
    "alga-ts": "npm:/alga-ts",
    "alga-ts/": "npm:/alga-ts/",
    "chai": "npm:/chai",
    "chai/": "npm:/chai/",
    "fast-check": "npm:/fast-check",
    "fbp-protocol": "npm:/fbp-protocol",
    "fbp-protocol/": "npm:/fbp-protocol/",
    "fp-ts": "https://deno.land/x/fp_ts@v2.11.4/mod.ts",
    "fp-ts/": "https://deno.land/x/fp_ts@v2.11.4/",
    "husky": "npm:/husky",
    "lint-staged": "npm:/lint-staged",
    "mocha": "npm:/mocha",
    "monocle-ts": "npm:/monocle-ts",
    "monocle-ts/": "npm:/monocle-ts/",
    "pattern-matching-ts": "npm:/pattern-matching-ts",
    "pattern-matching-ts/": "npm:/pattern-matching-ts/",
    "rotating-file-stream": "npm:/rotating-file-stream",
    "schemata-ts": "npm:/schemata-ts",
    "schemata-ts/": "npm:/schemata-ts/",
    "spectacles-ts": "npm:/spectacles-ts",
    "spectacles-ts/": "npm:/spectacles-ts/",
    "std/": "https://deno.land/std@0.204.0/",
    "tslog": "npm:/tslog",
    "viem": "npm:/viem",
    "viem/": "npm:/viem/",
    "vitest": "npm:/vitest"
  },
  "lint": {
    "rules": {
      "tags": [
        "recommended"
      ],
      "exclude": [
        "require-await"
      ]
    },
    "include": [
      "src/"
    ],
    "exclude": []
  },
  "fmt": {
    "useTabs": false,
    "lineWidth": 120,
    "indentWidth": 2,
    "semiColons": false,
    "singleQuote": true,
    "proseWrap": "preserve",
    "include": [
      "src/"
    ],
    "exclude": []
  }
}